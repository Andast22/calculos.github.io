<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Navegaci√≥n VFR</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        
        .flight-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 11px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .flight-table th {
            background: linear-gradient(145deg, #34495e, #2c3e50);
            color: white;
            padding: 8px 4px;
            text-align: center;
            font-weight: bold;
            border: 1px solid #34495e;
            font-size: 10px;
        }
        
        .flight-table td {
            padding: 8px 4px;
            text-align: center;
            border: 1px solid #bdc3c7;
            background: white;
            vertical-align: middle;
        }
        
        .flight-table tr:nth-child(even) td {
            background: #f8f9fa;
        }
        
        .flight-table tr:hover td {
            background: #e3f2fd;
            transition: all 0.2s ease;
        }
        
        input[type="number"], input[type="text"] {
            width: 50px;
            padding: 4px;
            border: 2px solid #3498db;
            border-radius: 4px;
            text-align: center;
            font-size: 10px;
            margin: 1px;
        }
        
        input.wide {
            width: 70px;
        }
        
        input.narrow {
            width: 40px;
        }
        
        input[type="number"]:focus, input[type="text"]:focus {
            outline: none;
            border-color: #e74c3c;
            box-shadow: 0 0 8px rgba(231, 76, 60, 0.3);
        }
        
        .calculated {
            background: #d5f4e6 !important;
            font-weight: bold;
            color: #27ae60;
        }
        
        .header-group-1 {
            background: linear-gradient(145deg, #8e44ad, #9b59b6);
        }
        
        .header-group-2 {
            background: linear-gradient(145deg, #e67e22, #f39c12);
        }
        
        .header-group-3 {
            background: linear-gradient(145deg, #2980b9, #3498db);
        }
        
        .header-group-4 {
            background: linear-gradient(145deg, #27ae60, #2ecc71);
        }
        
        .coord-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 2px 4px;
            border-radius: 3px;
            font-size: 8px;
            cursor: pointer;
            margin: 1px;
        }
        
        .coord-btn:hover {
            background: #2980b9;
        }
        
        .formula-info {
            background: linear-gradient(145deg, #3498db, #2980b9);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            font-size: 14px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .legend {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 8px;
            margin: 20px 0;
            font-size: 11px;
        }
        
        .legend-item {
            background: white;
            padding: 8px;
            border-radius: 6px;
            border-left: 3px solid #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .btn-calculate {
            background: linear-gradient(145deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            margin: 8px;
        }
        
        .btn-calculate:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }
        
        .coord-calculator {
            background: linear-gradient(145deg, #16a085, #1abc9c);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .coord-inputs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            align-items: center;
        }
        
        .coord-input-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .coord-input-group label {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 12px;
        }
        
        .coord-input-group input {
            width: 80px;
            padding: 6px;
        }
        
        .coord-input-group small {
            margin-top: 2px;
            opacity: 0.8;
        }
        
        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            cursor: pointer;
        }
        
        .delete-btn:hover {
            background: #c0392b;
        }

        .fuel-input {
            background: linear-gradient(145deg, #f39c12, #e67e22);
            color: white;
            padding: 10px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
        }

        .fuel-input input {
            width: 80px;
            padding: 5px;
            margin: 0 5px;
            border: 2px solid #e67e22;
            border-radius: 4px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìà Calculadora de Navegaci√≥n VFR Avanzada</h1>
        
        <div class="coord-calculator">
            <h3>üìã Instrucciones de Uso</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; text-align: left;">
                <div>
                    <h4>üéØ True Course (TC)</h4>
                    <p>Ingresa el rumbo verdadero desde tu carta de navegaci√≥n o sistema GPS</p>
                </div>
                <div>
                    <h4>üå¨Ô∏è Datos de Viento</h4>
                    <p>Cada tramo puede tener condiciones de viento diferentes</p>
                </div>
                <div>
                    <h4>üß≠ Variaci√≥n Magn√©tica</h4>
                    <p>Consulta las cartas ONC para obtener la VAR de cada zona</p>
                </div>
                <div>
                    <h4>‚úàÔ∏è True Air Speed</h4>
                    <p>Ajusta la TAS seg√∫n las condiciones de vuelo de cada tramo</p>
                </div>
            </div>
        </div>

        <div class="fuel-input">
            <strong>‚õΩ Consumo de Combustible por Hora:</strong>
            <input type="number" id="fuelRate" value="8.0" min="1" max="50" step="0.1"> galones/hora
            <small style="display: block; margin-top: 5px;">Ajusta seg√∫n las caracter√≠sticas de tu aeronave</small>
        </div>
        
        <div class="formula-info">
            <h4>üìã F√≥rmulas de Navegaci√≥n VFR:</h4>
            <p><strong>True Heading:</strong> TH = TC + WCA | <strong>Magnetic Heading:</strong> MH = TH + VAR (+W / -E) | <strong>Ground Speed:</strong> GS = f(TAS, Viento, TC)</p>
            <p><strong>WCA:</strong> √Ångulo de correcci√≥n por deriva | <strong>ETE:</strong> Tiempo = Distancia √∑ Ground Speed | <strong>Combustible:</strong> ETE √ó Consumo por hora</p>
        </div>
        
        <table class="flight-table">
            <thead>
                <tr>
                    <th rowspan="2">Tramo</th>
                    <th rowspan="2">Desde</th>
                    <th rowspan="2">Hasta</th>
                    <th rowspan="2">Dist<br>(nm)</th>
                    <th colspan="4" class="header-group-2">Datos de Viento</th>
                    <th colspan="3" class="header-group-1">Course</th>
                    <th colspan="3" class="header-group-3">Heading</th>
                    <th rowspan="2">TAS<br>(kt)</th>
                    <th rowspan="2">GS<br>(kt)</th>
                    <th colspan="2" class="header-group-4">Tiempo</th>
                    <th rowspan="2">Combustible<br>(gal)</th>

                </tr>
                <tr>
                    <th>Dir (¬∞)</th>
                    <th>Vel (kt)</th>
                    <th>VAR</th>
                    <th>TAS</th>
                    <th>TC (¬∞)</th>
                    <th>MC (¬∞)</th>
                    <th>WCA</th>
                    <th>TH (¬∞)</th>
                    <th>MH (¬∞)</th>
                    <th>Deriv</th>
                    <th>ETE</th>
                    <th>ATE</th>
                </tr>
            </thead>
            <tbody id="flightTableBody">
                <!-- Las filas se generar√°n din√°micamente -->
            </tbody>
        </table>
        
        <div style="text-align: center; margin: 20px 0;">
            <button class="btn-calculate" onclick="addLeg()">‚ûï Agregar Tramo</button>
            <button class="btn-calculate" onclick="calculateAll()">üßÆ Calcular Todo</button>
            <button class="btn-calculate" onclick="exportToCSV()">üìä Exportar CSV</button>
        </div>
        
        <div class="legend">
            <div class="legend-item">
                <strong>TC:</strong> True Course (Rumbo Verdadero)
            </div>
            <div class="legend-item">
                <strong>MC:</strong> Magnetic Course (Rumbo Magn√©tico)
            </div>
            <div class="legend-item">
                <strong>TH:</strong> True Heading (Proa Verdadera)
            </div>
            <div class="legend-item">
                <strong>MH:</strong> Magnetic Heading (Proa Magn√©tica)
            </div>
            <div class="legend-item">
                <strong>WCA:</strong> Wind Correction Angle (Correcci√≥n de Deriva)
            </div>
            <div class="legend-item">
                <strong>GS:</strong> Ground Speed (Velocidad Respecto al Suelo)
            </div>
            <div class="legend-item">
                <strong>VAR:</strong> Variaci√≥n Magn√©tica (+W / -E)
            </div>
            <div class="legend-item">
                <strong>ETE/ATE:</strong> Tiempo Estimado/Real en Ruta (formato HH¬∞ MM')
            </div>
        </div>
    </div>

    <script>
        let legCounter = 0;
        
        // Agregar tramos iniciales
        document.addEventListener('DOMContentLoaded', function() {
            addLeg('SKBO', 'VOR1', 45, 95, 120, 15, -5, 120);
            addLeg('VOR1', 'VOR2', 32, 142, 130, 12, -4, 125);
            addLeg('VOR2', 'SKMD', 28, 178, 110, 18, -6, 115);
            calculateAll();
        });
        
        function addLeg(from = '', to = '', distance = 0, trueCourse = 0, windDir = 120, windSpeed = 15, variation = -5, tas = 120) {
            legCounter++;
            const tbody = document.getElementById('flightTableBody');
            const row = tbody.insertRow();
            row.innerHTML = `
                <td>T${legCounter}</td>
                <td><input type="text" value="${from}" class="narrow"></td>
                <td><input type="text" value="${to}" class="narrow"></td>
                <td><input type="number" value="${distance}" min="0" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td><input type="number" value="${windDir}" min="0" max="360" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td><input type="number" value="${windSpeed}" min="0" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td><input type="number" value="${variation}" step="0.1" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td><input type="number" value="${tas}" min="1" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td><input type="number" value="${trueCourse}" min="0" max="360" class="narrow" onchange="calculateRow(this.parentNode.parentNode)"></td>
                <td class="calculated">0</td>
                <td class="calculated">0</td>
                <td class="calculated">0</td>
                <td class="calculated">0</td>
                <td class="calculated">0</td>
                <td class="calculated">0</td>
                <td class="calculated">00¬∞ 00'</td>
                <td><input type="text" placeholder="00¬∞ 00'" class="narrow" onblur="validateTimeFormat(this)"></td>
                <td class="calculated">0.0</td>
            `;
        }
        
        function calculateRow(row) {
            const cells = row.cells;
            
            // Verificar que todas las celdas existan
            if (cells.length < 18) {
                console.error('Error: N√∫mero insuficiente de celdas en la fila', 'Tiene:', cells.length);
                return;
            }
            
            // Obtener valores de entrada
            const distanceInput = cells[3].querySelector('input');
            const windDirInput = cells[4].querySelector('input');
            const windSpeedInput = cells[5].querySelector('input');
            const variationInput = cells[6].querySelector('input');
            const tasInput = cells[7].querySelector('input');
            const trueCourseInput = cells[8].querySelector('input');
            
            if (!distanceInput || !windDirInput || !windSpeedInput || !variationInput || !tasInput || !trueCourseInput) {
                console.error('Error: No se encontraron todos los inputs necesarios');
                return;
            }
            
            const distance = parseFloat(distanceInput.value) || 0;
            const windDirection = parseFloat(windDirInput.value) || 0;
            const windSpeed = parseFloat(windSpeedInput.value) || 0;
            const variation = parseFloat(variationInput.value) || 0;
            const tas = parseFloat(tasInput.value) || 120;
            const trueCourse = parseFloat(trueCourseInput.value) || 0;
            
            // Calcular Magnetic Course (MC)
            const magneticCourse = normalizeAngle(trueCourse + variation);
            
            // Calcular Wind Correction Angle (WCA) usando trigonometr√≠a aeron√°utica
            const windAngle = normalizeAngle(windDirection - trueCourse);
            const windAngleRad = windAngle * Math.PI / 180;
            
            let wca = 0;
            if (windSpeed > 0 && tas > 0) {
                const sinWCA = (windSpeed * Math.sin(windAngleRad)) / tas;
                if (Math.abs(sinWCA) <= 1) {
                    wca = Math.asin(sinWCA) * 180 / Math.PI;
                }
            }
            
            // Calcular True Heading (TH)
            const trueHeading = normalizeAngle(trueCourse + wca);
            
            // Calcular Magnetic Heading (MH)
            const magneticHeading = normalizeAngle(trueHeading + variation);
            
            // Calcular Ground Speed (GS) usando componentes de viento
            const headwindComponent = windSpeed * Math.cos(windAngleRad);
            const crosswindComponent = windSpeed * Math.sin(windAngleRad);
            
            // Velocidad efectiva considerando viento cruzado
            const effectiveTAS = Math.sqrt(Math.max(0, tas * tas - (crosswindComponent * Math.cos(wca * Math.PI / 180)) * (crosswindComponent * Math.cos(wca * Math.PI / 180))));
            const groundSpeed = Math.max(1, effectiveTAS - headwindComponent);
            
            // Calcular ETE (Estimated Time Enroute)
            const eteHours = distance / groundSpeed;
            const eteMinutes = Math.round(eteHours * 60);
            const eteFormatted = `${Math.floor(eteMinutes / 60).toString().padStart(2, '0')}¬∞ ${(eteMinutes % 60).toString().padStart(2, '0')}'`;
            
            // Calcular combustible usando el consumo por hora del input
            const fuelRateInput = document.getElementById('fuelRate');
            const fuelRate = parseFloat(fuelRateInput ? fuelRateInput.value : 8.0) || 8.0;
            const fuelConsumption = (eteHours * fuelRate).toFixed(1);
            
            // Actualizar celdas calculadas - orden correcto seg√∫n la tabla
            cells[9].textContent = Math.round(magneticCourse); // MC
            cells[10].textContent = wca >= 0 ? `+${Math.round(wca)}` : Math.round(wca).toString(); // WCA
            cells[11].textContent = Math.round(trueHeading); // TH
            cells[12].textContent = Math.round(magneticHeading); // MH
            cells[13].textContent = Math.round(wca); // Deriva
            cells[14].textContent = Math.round(groundSpeed); // GS
            cells[15].textContent = eteFormatted; // ETE
            // cells[16] es ATE (input manual)
            cells[17].textContent = fuelConsumption; // Combustible
        }
        
        function validateTimeFormat(input) {
            let value = input.value.trim();
            
            if (value === '') return;
            
            // Si el usuario ingresa solo n√∫meros (minutos)
            if (/^\d{1,4}$/.test(value)) {
                const totalMinutes = parseInt(value);
                const hours = Math.floor(totalMinutes / 60).toString().padStart(2, '0');
                const minutes = (totalMinutes % 60).toString().padStart(2, '0');
                input.value = `${hours}¬∞ ${minutes}'`;
            } 
            // Si ingresa formato HH:MM
            else if (/^\d{1,2}:\d{2}$/.test(value)) {
                const parts = value.split(':');
                const hours = parseInt(parts[0]).toString().padStart(2, '0');
                const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                input.value = `${hours}¬∞ ${minutes}'`;
            }
            // Si ya est√° en formato correcto, normalizarlo
            else if (/^\d{1,2}¬∞\s*\d{1,2}'?$/.test(value)) {
                const match = value.match(/(\d{1,2})¬∞\s*(\d{1,2})'?/);
                if (match) {
                    const hours = parseInt(match[1]).toString().padStart(2, '0');
                    const minutes = parseInt(match[2]).toString().padStart(2, '0');
                    input.value = `${hours}¬∞ ${minutes}'`;
                }
            }
        }
        
        function normalizeAngle(angle) {
            while (angle < 0) angle += 360;
            while (angle >= 360) angle -= 360;
            return angle;
        }
        
        function calculateAll() {
            const tbody = document.getElementById('flightTableBody');
            for (let i = 0; i < tbody.rows.length; i++) {
                calculateRow(tbody.rows[i]);
            }
        }
        
        function deleteRow(button) {
            const row = button.closest('tr');
            row.remove();
        }
        
        function exportToCSV() {
            const table = document.getElementById('flightTableBody');
            const headers = ['Tramo', 'Desde', 'Hasta', 'Distancia', 'Wind Dir', 'Wind Speed', 'Variacion', 'TAS', 'TC', 'MC', 'WCA', 'TH', 'MH', 'Deriva', 'GS', 'ETE', 'ATE', 'Combustible'];
            let csv = headers.join(',') + '\n';
            
            for (let i = 0; i < table.rows.length; i++) {
                const row = table.rows[i];
                const rowData = [];
                
                for (let j = 0; j < row.cells.length; j++) {
                    const cell = row.cells[j];
                    const input = cell.querySelector('input');
                    if (input) {
                        rowData.push(`"${input.value}"`);
                    } else {
                        rowData.push(`"${cell.textContent.trim()}"`);
                    }
                }
                
                csv += rowData.join(',') + '\n';
            }
            
            // Descargar el archivo CSV
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'plan_de_vuelo_vfr.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }

        // Recalcular cuando cambie el consumo de combustible
        document.addEventListener('DOMContentLoaded', function() {
            const fuelRateInput = document.getElementById('fuelRate');
            if (fuelRateInput) {
                fuelRateInput.addEventListener('change', calculateAll);
            }
        });
    </script>
</body>
</html>
